import React from 'react';
import { connect } from 'react-redux'
import api from '../../services/Api';
import QdtComponents from 'qdt-components';
import { setQlikParams, setQlikConnection, setQlikInstance } from '../../actions/qlik'

class QlikConnector extends React.Component {

  constructor(props) {
    super(props)

    this.state = {
      isConnected: props.QlikConnected,
      QlikData: props.QlikParams,
      apiError: null
    }
    this.connectQlik = this.connectQlik.bind(this);
  }

  componentDidMount() {
    this.requestQlikData()
  }

  // first request API
  requestQlikData = () => {

    // if ( window.GlobalQdtComponents || this.props.QlikConnected ) {
    //   this.connectQlik() // skip API responce and image reguest
    //   return
    // }

    this.props.setQlikConnection(false)

    api
      .get(`GetSellerPointTicketDetails`)
      .then((res) => {
        console.log('backend responce to Get GetSellerPointTicketDetails', res)

        if (res.data.IsSuccess) {
          this.props.setQlikParams({
            QlikAppId: res.data.QlikAppId,
            QTicket: res.data.QTicket,
            QlikProtocol: res.data.QlikProtocol,
            QSecure: res.data.QSecure,
            QServer: res.data.QServer,
            QPort: res.data.QPort,
            VirtualProxy: res.data.VirtualProxy,
            QUrl: res.data.QUrl,
            IsWebTicketEnabled: res.data.IsWebTicketEnabled
          })

          this.setState({
            QlikData: {
              QlikAppId: res.data.QlikAppId,
              QTicket: res.data.QTicket,
              QlikProtocol: res.data.QlikProtocol,
              QSecure: res.data.QSecure,
              QServer: res.data.QServer,
              QPort: res.data.QPort,
              VirtualProxy: res.data.VirtualProxy,
              QUrl: res.data.QUrl,
              IsWebTicketEnabled: res.data.IsWebTicketEnabled
            }
          }, () => {
            this.requestQlikCSS(); // next step
          })
        } else {
          this.setState({
            apiError: res.data.ErrorMessage
          });
          this.props.setQlikConnection(false)
        }
      })
      .catch(function (error) {
        console.log(error);
      });
  }

  // Step 1: Load Qlik CSS
  requestQlikCSS = () => {
    const { QlikData } = this.state
    var link = document.createElement("link");
    link.type = "text/css";
    link.rel = "stylesheet";
    link.addEventListener("load", this.requestQlikRequire.bind(this), false);
    link.href = `${QlikData.QUrl}/resources/autogenerated/qlik-styles.css?qlikTicket=${QlikData.QTicket}`;
    document.getElementsByTagName("head")[0].appendChild(link);
  }

  // Step 2: Load Qlik Require JS
  requestQlikRequire = () => {
    const { QlikData } = this.state
    console.log("CSS finished loading and now loading requirejs");
    var script = document.createElement("script");
    script.src = `${QlikData.QUrl}/resources/assets/external/requirejs/require.js`;
    script.addEventListener("load", this.connectQlik());
    document.getElementsByTagName("head")[0].appendChild(script);
  }

  // Step 3: Connect and prepate qdt Components.
  connectQlik = async () => {
    const { QlikData } = this.state
    const options = {
      config: {
        host: QlikData.QServer,
        secure: QlikData.QSecure,
        port: QlikData.QPort,
        prefix: QlikData.VirtualProxy,
        appId: QlikData.QlikAppId
      },
      connections: {
        vizApi: true,
        //engineApi: true
      }
    }
    console.log('connectQlik');
    setTimeout(function () {
      // if (!window.GlobalQdtComponents || !this.props.QlikConnected) {
      const qdtComponents = new QdtComponents(options.config, options.connections);
      window.GlobalQdtComponents = qdtComponents
      // }

      this.props.setQlikConnection(true)
    }.bind(this), 1000)
  }

  render() {
    return null
  }
}

const mapStateToProps = (state) => ({
  QlikConnected: state.qlik.connected,
  QlikParams: state.qlik.params,
  QlikInstance: state.qlik.instance
});

const mapDispatchToProps = (dispatch) => ({
  setQlikConnection: (data) => dispatch(setQlikConnection(data)),
  setQlikParams: (data) => dispatch(setQlikParams(data)),
  setQlikInstance: (data) => dispatch(setQlikInstance(data)),
});

export default connect(mapStateToProps, mapDispatchToProps)(QlikConnector);